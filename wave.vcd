$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 8 clk $end
  $var wire 1 9 rst $end
  $scope module core $end
   $var wire 1 8 clk $end
   $var wire 1 9 rst $end
   $var wire 32 3 pc_p0 [31:0] $end
   $var wire 32 4 imem_data [31:0] $end
   $var wire 1 : imem_enable $end
   $var wire 8 5 imem_addr [7:0] $end
   $var wire 32 # fpadd_in1 [31:0] $end
   $var wire 32 $ fpadd_in2 [31:0] $end
   $var wire 32 6 fpadd_result [31:0] $end
   $scope module fetch $end
    $var wire 1 8 clk $end
    $var wire 1 9 rst $end
    $var wire 1 ; is_branch $end
    $var wire 1 ; is_trap $end
    $var wire 32 < branch_target [31:0] $end
    $var wire 32 < trap_target [31:0] $end
    $var wire 32 3 pc [31:0] $end
    $var wire 32 7 pc_plus4 [31:0] $end
   $upscope $end
   $scope module fpadd0 $end
    $var wire 1 8 clk $end
    $var wire 1 9 rst $end
    $var wire 32 # in1 [31:0] $end
    $var wire 32 $ in2 [31:0] $end
    $var wire 32 6 result [31:0] $end
    $var wire 1 % in1_sign $end
    $var wire 8 & in1_exponent [7:0] $end
    $var wire 24 ' in1_mantissa [23:0] $end
    $var wire 1 ( in2_sign $end
    $var wire 8 ) in2_exponent [7:0] $end
    $var wire 24 * in2_mantissa [23:0] $end
    $var wire 1 + in1_ge $end
    $var wire 8 , exponent_diff [7:0] $end
    $var wire 24 - in1_mantissa_shifted [23:0] $end
    $var wire 24 . in2_mantissa_shifted [23:0] $end
    $var wire 8 / greater_exponent [7:0] $end
    $var wire 25 0 unsigned_adder [24:0] $end
    $var wire 23 1 unsigned_adder_normalized [22:0] $end
    $var wire 8 2 result_exponent [7:0] $end
   $upscope $end
   $scope module imem $end
    $var wire 8 5 addr [7:0] $end
    $var wire 1 : enable $end
    $var wire 32 4 data [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000110010010000111111010000 #
b00000000001101010000010011110011 $
0%
b00000001 &
b110010010000111111010000 '
0(
b00000000 )
b101101010000010011110011 *
1+
b00000001 ,
b110010010000111111010000 -
b010110101000001001111001 .
b00000001 /
b1001000111001001001001001 0
b00100011100100100100100 1
b00000010 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000100 7
08
09
1:
0;
b00000000000000000000000000000000 <
#1
b00000000000000000000000000000100 3
b00000100 5
b00000001000100011100100100100100 6
b00000000000000000000000000001000 7
18
#2
08
#3
b00000000000000000000000000001000 3
b00001000 5
b00000000000000000000000000001100 7
18
#4
08
#5
b00000000000000000000000000001100 3
b00001100 5
b00000000000000000000000000010000 7
18
#6
08
#7
b00000000000000000000000000010000 3
b00010000 5
b00000000000000000000000000010100 7
18
#8
08
#9
b00000000000000000000000000010100 3
b00010100 5
b00000000000000000000000000011000 7
18
#10
08
#11
b00000000000000000000000000011000 3
b00011000 5
b00000000000000000000000000011100 7
18
#12
08
#13
b00000000000000000000000000011100 3
b00011100 5
b00000000000000000000000000100000 7
18
#14
08
#15
b00000000000000000000000000100000 3
b00100000 5
b00000000000000000000000000100100 7
18
#16
08
#17
b00000000000000000000000000100100 3
b00100100 5
b00000000000000000000000000101000 7
18
#18
08
#19
b00000000000000000000000000101000 3
b00101000 5
b00000000000000000000000000101100 7
18
